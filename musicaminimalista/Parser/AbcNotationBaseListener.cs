//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from AbcNotation.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591


	using MusicaMinimalista.Objects.Music;
	using MusicaMinimalista.Objects.Utils;


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IAbcNotationListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class AbcNotationBaseListener : IAbcNotationListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="AbcNotationParser.file"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFile([NotNull] AbcNotationParser.FileContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AbcNotationParser.file"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFile([NotNull] AbcNotationParser.FileContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AbcNotationParser.header"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterHeader([NotNull] AbcNotationParser.HeaderContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AbcNotationParser.header"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitHeader([NotNull] AbcNotationParser.HeaderContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AbcNotationParser.x_field"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterX_field([NotNull] AbcNotationParser.X_fieldContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AbcNotationParser.x_field"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitX_field([NotNull] AbcNotationParser.X_fieldContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AbcNotationParser.t_field"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterT_field([NotNull] AbcNotationParser.T_fieldContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AbcNotationParser.t_field"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitT_field([NotNull] AbcNotationParser.T_fieldContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AbcNotationParser.m_field"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterM_field([NotNull] AbcNotationParser.M_fieldContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AbcNotationParser.m_field"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitM_field([NotNull] AbcNotationParser.M_fieldContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AbcNotationParser.q_field"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterQ_field([NotNull] AbcNotationParser.Q_fieldContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AbcNotationParser.q_field"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitQ_field([NotNull] AbcNotationParser.Q_fieldContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AbcNotationParser.l_field"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterL_field([NotNull] AbcNotationParser.L_fieldContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AbcNotationParser.l_field"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitL_field([NotNull] AbcNotationParser.L_fieldContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AbcNotationParser.k_field"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterK_field([NotNull] AbcNotationParser.K_fieldContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AbcNotationParser.k_field"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitK_field([NotNull] AbcNotationParser.K_fieldContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AbcNotationParser.score"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterScore([NotNull] AbcNotationParser.ScoreContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AbcNotationParser.score"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitScore([NotNull] AbcNotationParser.ScoreContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AbcNotationParser.v_field"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterV_field([NotNull] AbcNotationParser.V_fieldContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AbcNotationParser.v_field"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitV_field([NotNull] AbcNotationParser.V_fieldContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AbcNotationParser.music_elem"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMusic_elem([NotNull] AbcNotationParser.Music_elemContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AbcNotationParser.music_elem"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMusic_elem([NotNull] AbcNotationParser.Music_elemContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AbcNotationParser.ignored_elem"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIgnored_elem([NotNull] AbcNotationParser.Ignored_elemContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AbcNotationParser.ignored_elem"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIgnored_elem([NotNull] AbcNotationParser.Ignored_elemContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AbcNotationParser.chord"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterChord([NotNull] AbcNotationParser.ChordContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AbcNotationParser.chord"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitChord([NotNull] AbcNotationParser.ChordContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AbcNotationParser.note"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNote([NotNull] AbcNotationParser.NoteContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AbcNotationParser.note"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNote([NotNull] AbcNotationParser.NoteContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AbcNotationParser.noteduration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNoteduration([NotNull] AbcNotationParser.NotedurationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AbcNotationParser.noteduration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNoteduration([NotNull] AbcNotationParser.NotedurationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AbcNotationParser.pitch"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPitch([NotNull] AbcNotationParser.PitchContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AbcNotationParser.pitch"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPitch([NotNull] AbcNotationParser.PitchContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="AbcNotationParser.bar"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBar([NotNull] AbcNotationParser.BarContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="AbcNotationParser.bar"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBar([NotNull] AbcNotationParser.BarContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
